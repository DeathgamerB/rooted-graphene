From 6f7acdf3177ffa7c5d6b3a4409add807b201dc9e Mon Sep 17 00:00:00 2001
From: Android Build <androidbuild@localhost>
Date: Sun, 9 Jun 2024 23:04:41 +0100
Subject: [PATCH] Add SUSFS 1.3.2 for 5.15

---
 fs/Makefile           |    9 +-
 fs/namei.c            |  102 +++++
 fs/open.c             |   46 ++
 fs/proc/base.c        |    9 +
 fs/proc/task_mmu.c    |   23 +
 fs/proc_namespace.c   |   16 +
 fs/readdir.c          |   11 +
 fs/stat.c             |   15 +
 fs/susfs.c            | 1003 +++++++++++++++++++++++++++++++++++++++++
 include/linux/mount.h |    4 +
 include/linux/susfs.h |  173 +++++++
 kernel/sys.c          |    9 +
 12 files changed, 1417 insertions(+), 3 deletions(-)
 create mode 100644 fs/susfs.c
 create mode 100644 include/linux/susfs.h

diff --git a/fs/Makefile b/fs/Makefile
index e4adb9882..f06abf137 100644
--- a/fs/Makefile
+++ b/fs/Makefile
@@ -4,7 +4,7 @@
 #
 # 14 Sep 2000, Christoph Hellwig <hch@infradead.org>
 # Rewritten to use lists instead of if-statements.
-# 
+#
 
 subdir-ccflags-y += -DANDROID_GKI_VFS_EXPORT_ONLY=VFS_internal_I_am_really_a_filesystem_and_am_NOT_a_driver
 
@@ -14,8 +14,11 @@ obj-y :=	open.o read_write.o file_table.o super.o \
 		attr.o bad_inode.o file.o filesystems.o namespace.o \
 		seq_file.o xattr.o libfs.o fs-writeback.o \
 		pnode.o splice.o sync.o utimes.o d_path.o \
-		stack.o fs_struct.o statfs.o fs_pin.o nsfs.o \
-		fs_types.o fs_context.o fs_parser.o fsopen.o init.o \
+		stack.o fs_struct.o statfs.o fs_pin.o nsfs.o
+
+obj-$(CONFIG_KSU_SUSFS) += susfs.o
+
+obj-y +=	fs_types.o fs_context.o fs_parser.o fsopen.o init.o \
 		kernel_read_file.o remap_range.o
 
 ifeq ($(CONFIG_BLOCK),y)
diff --git a/fs/namei.c b/fs/namei.c
index a3922d96f..fc4193b12 100644
--- a/fs/namei.c
+++ b/fs/namei.c
@@ -43,6 +43,11 @@
 #include "internal.h"
 #include "mount.h"
 
+#if defined(CONFIG_KSU) && defined(CONFIG_KSU_SUSFS)
+#include <linux/susfs.h>
+#endif
+
+
 /* [Feb-1997 T. Schoebel-Theuer]
  * Fundamental changes in the pathname lookup mechanisms (namei)
  * were necessary because of omirr.  The reason is that omirr needs
@@ -3765,6 +3770,13 @@ struct file *do_filp_open(int dfd, struct filename *pathname,
 	int flags = op->lookup_flags;
 	struct file *filp;
 
+#if defined(CONFIG_KSU) && defined(CONFIG_KSU_SUSFS)
+	int error;
+	if (susfs_sus_path_by_filename(pathname, &error, SYSCALL_FAMILY_ALL_ENOENT)) {
+		return ERR_PTR(error);
+	}
+#endif
+
 	set_nameidata(&nd, dfd, pathname, NULL);
 	filp = path_openat(&nd, op, flags | LOOKUP_RCU);
 	if (unlikely(filp == ERR_PTR(-ECHILD)))
@@ -3974,6 +3986,16 @@ static int do_mknodat(int dfd, struct filename *name, umode_t mode,
 	int error;
 	unsigned int lookup_flags = 0;
 
+#if defined(CONFIG_KSU) && defined(CONFIG_KSU_SUSFS)
+	int status;
+
+	status = susfs_sus_path_by_filename(name, &error, SYSCALL_FAMILY_MKNOD);
+
+	if (status) {
+		return error;
+	}
+#endif
+
 	error = may_mknod(mode);
 	if (error)
 		goto out1;
@@ -4076,6 +4098,16 @@ int do_mkdirat(int dfd, struct filename *name, umode_t mode)
 	int error;
 	unsigned int lookup_flags = LOOKUP_DIRECTORY;
 
+#if defined(CONFIG_KSU) && defined(CONFIG_KSU_SUSFS)
+	int status;
+
+	status = susfs_sus_path_by_filename(name, &error, SYSCALL_FAMILY_MKDIRAT);
+
+	if (status) {
+		return error;
+	}
+#endif
+
 retry:
 	dentry = filename_create(dfd, name, &path, lookup_flags);
 	error = PTR_ERR(dentry);
@@ -4173,6 +4205,18 @@ int do_rmdir(int dfd, struct filename *name)
 	struct qstr last;
 	int type;
 	unsigned int lookup_flags = 0;
+
+#if defined(CONFIG_KSU) && defined(CONFIG_KSU_SUSFS)
+	int status;
+
+	status = susfs_sus_path_by_filename(name, &error, SYSCALL_FAMILY_RMDIR);
+
+	if (status) {
+		return error;
+	}
+	error = 0;
+#endif
+
 retry:
 	error = filename_parentat(dfd, name, lookup_flags, &path, &last, &type);
 	if (error)
@@ -4440,6 +4484,16 @@ int do_symlinkat(struct filename *from, int newdfd, struct filename *to)
 	struct path path;
 	unsigned int lookup_flags = 0;
 
+#if defined(CONFIG_KSU) && defined(CONFIG_KSU_SUSFS)
+	int status;
+
+	status = susfs_sus_path_by_filename(to, &error, SYSCALL_FAMILY_SYMLINKAT_NEWNAME);
+
+	if (status) {
+		return error;
+	}
+#endif
+
 	if (IS_ERR(from)) {
 		error = PTR_ERR(from);
 		goto out_putnames;
@@ -4588,6 +4642,22 @@ int do_linkat(int olddfd, struct filename *old, int newdfd,
 	int how = 0;
 	int error;
 
+#if defined(CONFIG_KSU) && defined(CONFIG_KSU_SUSFS)
+	int status;
+
+	status = susfs_sus_path_by_filename(old, &error, SYSCALL_FAMILY_LINKAT_OLDNAME);
+
+	if (status) {
+		return error;
+	}
+
+	status = susfs_sus_path_by_filename(new, &error, SYSCALL_FAMILY_LINKAT_NEWNAME);
+
+	if (status) {
+		return error;
+	}
+#endif
+
 	if ((flags & ~(AT_SYMLINK_FOLLOW | AT_EMPTY_PATH)) != 0) {
 		error = -EINVAL;
 		goto out_putnames;
@@ -4882,6 +4952,22 @@ int do_renameat2(int olddfd, struct filename *from, int newdfd,
 	bool should_retry = false;
 	int error = -EINVAL;
 
+#if defined(CONFIG_KSU) && defined(CONFIG_KSU_SUSFS)
+	int status;
+
+	status = susfs_sus_path_by_filename(from, &error, SYSCALL_FAMILY_RENAMEAT2_OLDNAME);
+
+	if (status) {
+		return error;
+	}
+
+	status = susfs_sus_path_by_filename(to, &error, SYSCALL_FAMILY_RENAMEAT2_NEWNAME);
+
+	if (status) {
+		return error;
+	}
+#endif
+
 	if (flags & ~(RENAME_NOREPLACE | RENAME_EXCHANGE | RENAME_WHITEOUT))
 		goto put_names;
 
@@ -4898,11 +4984,25 @@ int do_renameat2(int olddfd, struct filename *from, int newdfd,
 	if (error)
 		goto put_names;
 
+#if defined(CONFIG_KSU) && defined(CONFIG_KSU_SUSFS)
+	status = susfs_sus_path_by_filename(from, &error, SYSCALL_FAMILY_RENAMEAT2_OLDNAME);
+	if (status) {
+		goto exit;
+	}
+#endif
+
 	error = filename_parentat(newdfd, to, lookup_flags, &new_path, &new_last,
 				  &new_type);
 	if (error)
 		goto exit1;
 
+#if defined(CONFIG_KSU) && defined(CONFIG_KSU_SUSFS)
+	status = susfs_sus_path_by_filename(to, &error, SYSCALL_FAMILY_RENAMEAT2_NEWNAME);
+	if (status) {
+		goto exit;
+	}
+#endif
+
 	error = -EXDEV;
 	if (old_path.mnt != new_path.mnt)
 		goto exit2;
@@ -5006,6 +5106,8 @@ int do_renameat2(int olddfd, struct filename *from, int newdfd,
 		lookup_flags |= LOOKUP_REVAL;
 		goto retry;
 	}
+exit:
+	return error;
 put_names:
 	putname(from);
 	putname(to);
diff --git a/fs/open.c b/fs/open.c
index acb11b3eb..66b5b3daa 100644
--- a/fs/open.c
+++ b/fs/open.c
@@ -35,6 +35,11 @@
 #include <linux/mnt_idmapping.h>
 
 #include "internal.h"
+
+#if defined(CONFIG_KSU) && defined(CONFIG_KSU_SUSFS)
+#include <linux/susfs.h>
+#endif
+
 #include <trace/hooks/syscall_check.h>
 
 int do_truncate(struct user_namespace *mnt_userns, struct dentry *dentry,
@@ -126,6 +131,19 @@ long do_sys_truncate(const char __user *pathname, loff_t length)
 	struct path path;
 	int error;
 
+#if defined(CONFIG_KSU) && defined(CONFIG_KSU_SUSFS)
+	struct filename* fname;
+	int status;
+
+	fname = getname_safe(pathname);
+	status = susfs_sus_path_by_filename(fname, &error, SYSCALL_FAMILY_ALL_ENOENT);
+	putname_safe(fname);
+
+	if (status) {
+		return error;
+	}
+#endif
+
 	if (length < 0)	/* sorry, but loff_t says... */
 		return -EINVAL;
 
@@ -402,6 +420,20 @@ static long do_faccessat(int dfd, const char __user *filename, int mode, int fla
 	unsigned int lookup_flags = LOOKUP_FOLLOW;
 	const struct cred *old_cred = NULL;
 
+#if defined(CONFIG_KSU) && defined(CONFIG_KSU_SUSFS)
+	struct filename* fname;
+	int status;
+	int error;
+
+	fname = getname_safe(filename);
+	status = susfs_sus_path_by_filename(fname, &error, SYSCALL_FAMILY_ALL_ENOENT);
+	putname_safe(fname);
+
+	if (status) {
+		return error;
+	}
+#endif
+
 	if (mode & ~S_IRWXO)	/* where's F_OK, X_OK, W_OK, R_OK? */
 		return -EINVAL;
 
@@ -487,6 +519,20 @@ SYSCALL_DEFINE1(chdir, const char __user *, filename)
 	struct path path;
 	int error;
 	unsigned int lookup_flags = LOOKUP_FOLLOW | LOOKUP_DIRECTORY;
+
+#if defined(CONFIG_KSU) && defined(CONFIG_KSU_SUSFS)
+	struct filename* fname;
+	int status;
+
+	fname = getname_safe(filename);
+	status = susfs_sus_path_by_filename(fname, &error, SYSCALL_FAMILY_ALL_ENOENT);
+	putname_safe(fname);
+
+	if (status) {
+		return error;
+	}
+#endif
+
 retry:
 	error = user_path_at(AT_FDCWD, filename, lookup_flags, &path);
 	if (error)
diff --git a/fs/proc/base.c b/fs/proc/base.c
index 57aafb74d..2a7167ae0 100644
--- a/fs/proc/base.c
+++ b/fs/proc/base.c
@@ -105,6 +105,10 @@
 
 #include "../../lib/kstrtox.h"
 
+#if defined(CONFIG_KSU) && defined(CONFIG_KSU_SUSFS)
+#include <linux/susfs.h>
+#endif
+
 /* NOTE:
  *	Implementing inode permission operations in /proc is almost
  *	certainly an error.  Permission checks need to happen during
@@ -1792,6 +1796,11 @@ static int do_proc_readlink(struct path *path, char __user *buffer, int buflen)
 
 	if (len > buflen)
 		len = buflen;
+
+#if defined(CONFIG_KSU) && defined(CONFIG_KSU_SUSFS)
+	susfs_sus_proc_fd_link(pathname, len);
+#endif
+
 	if (copy_to_user(buffer, pathname, len))
 		len = -EFAULT;
  out:
diff --git a/fs/proc/task_mmu.c b/fs/proc/task_mmu.c
index e429aadc3..f3d9d41e2 100644
--- a/fs/proc/task_mmu.c
+++ b/fs/proc/task_mmu.c
@@ -27,6 +27,10 @@
 #include <asm/tlbflush.h>
 #include "internal.h"
 
+#if defined(CONFIG_KSU) && defined(CONFIG_KSU_SUSFS)
+#include <linux/susfs.h>
+#endif
+
 #define SEQ_PUT_DEC(str, val) \
 		seq_put_decimal_ull_width(m, str, (val) << (PAGE_SHIFT-10), 8)
 void task_mem(struct seq_file *m, struct mm_struct *mm)
@@ -281,6 +285,11 @@ show_map_vma(struct seq_file *m, struct vm_area_struct *vma)
 	dev_t dev = 0;
 	const char *name = NULL;
 
+#if defined(CONFIG_KSU) && defined(CONFIG_KSU_SUSFS)
+	char tmpname[SUSFS_MAX_LEN_PATHNAME];
+	int ret = 0;
+#endif
+
 	if (file) {
 		struct inode *inode = file_inode(vma->vm_file);
 		dev = inode->i_sb->s_dev;
@@ -290,8 +299,22 @@ show_map_vma(struct seq_file *m, struct vm_area_struct *vma)
 
 	start = vma->vm_start;
 	end = vma->vm_end;
+
+#if defined(CONFIG_KSU) && defined(CONFIG_KSU_SUSFS)
+	ret = susfs_sus_maps(ino, end - start, &ino, &dev, &flags, &pgoff, vma, tmpname);
+#endif
+
 	show_vma_header_prefix(m, start, end, flags, pgoff, dev, ino);
 
+#if defined(CONFIG_KSU) && defined(CONFIG_KSU_SUSFS)
+	if (ret == 2) {
+		seq_pad(m, ' ');
+		seq_puts(m, tmpname);
+		seq_putc(m, '\n');
+		return;
+	}
+#endif
+
 	/*
 	 * Print the dentry name for named mappings, and a
 	 * special [heap] marker for the heap:
diff --git a/fs/proc_namespace.c b/fs/proc_namespace.c
index 49650e54d..540b56f17 100644
--- a/fs/proc_namespace.c
+++ b/fs/proc_namespace.c
@@ -18,6 +18,10 @@
 #include "pnode.h"
 #include "internal.h"
 
+#if defined(CONFIG_KSU) && defined(CONFIG_KSU_SUSFS)
+#include <linux/susfs.h>
+#endif
+
 static __poll_t mounts_poll(struct file *file, poll_table *wait)
 {
 	struct seq_file *m = file->private_data;
@@ -106,6 +110,10 @@ static int show_vfsmnt(struct seq_file *m, struct vfsmount *mnt)
 	struct super_block *sb = mnt_path.dentry->d_sb;
 	int err;
 
+#if defined(CONFIG_KSU) && defined(CONFIG_KSU_SUSFS)
+	if (susfs_sus_mount(mnt, &p->root)) return 0;
+#endif
+
 	if (sb->s_op->show_devname) {
 		err = sb->s_op->show_devname(m, mnt_path.dentry);
 		if (err)
@@ -140,6 +148,10 @@ static int show_mountinfo(struct seq_file *m, struct vfsmount *mnt)
 	struct path mnt_path = { .dentry = mnt->mnt_root, .mnt = mnt };
 	int err;
 
+#if defined(CONFIG_KSU) && defined(CONFIG_KSU_SUSFS)
+	if (susfs_sus_mount(mnt, &p->root)) return 0;
+#endif
+
 	seq_printf(m, "%i %i %u:%u ", r->mnt_id, r->mnt_parent->mnt_id,
 		   MAJOR(sb->s_dev), MINOR(sb->s_dev));
 	if (sb->s_op->show_path) {
@@ -202,6 +214,10 @@ static int show_vfsstat(struct seq_file *m, struct vfsmount *mnt)
 	struct super_block *sb = mnt_path.dentry->d_sb;
 	int err;
 
+#if defined(CONFIG_KSU) && defined(CONFIG_KSU_SUSFS)
+	if (susfs_sus_mount(mnt, &p->root)) return 0;
+#endif
+
 	/* device */
 	if (sb->s_op->show_devname) {
 		seq_puts(m, "device ");
diff --git a/fs/readdir.c b/fs/readdir.c
index 09e8ed7d4..9f19ce295 100644
--- a/fs/readdir.c
+++ b/fs/readdir.c
@@ -22,6 +22,10 @@
 #include <linux/compat.h>
 #include <linux/uaccess.h>
 
+#if defined(CONFIG_KSU) && defined(CONFIG_KSU_SUSFS)
+#include <linux/susfs.h>
+#endif
+
 #include <asm/unaligned.h>
 
 /*
@@ -244,6 +248,13 @@ static int filldir(struct dir_context *ctx, const char *name, int namlen,
 	prev_reclen = buf->prev_reclen;
 	if (prev_reclen && signal_pending(current))
 		return -EINTR;
+
+#if defined(CONFIG_KSU) && defined(CONFIG_KSU_SUSFS)
+	if (susfs_sus_ino_for_filldir64(ino)) {
+		return 0;
+	}
+#endif
+
 	dirent = buf->current_dir;
 	prev = (void __user *) dirent - prev_reclen;
 	if (!user_write_access_begin(prev, reclen + prev_reclen))
diff --git a/fs/stat.c b/fs/stat.c
index 3e5be6702..31dbe643f 100644
--- a/fs/stat.c
+++ b/fs/stat.c
@@ -21,6 +21,10 @@
 #include <linux/uaccess.h>
 #include <asm/unistd.h>
 
+#if defined(CONFIG_KSU) && defined(CONFIG_KSU_SUSFS)
+#include <linux/susfs.h>
+#endif
+
 #include "internal.h"
 #include "mount.h"
 
@@ -154,6 +158,12 @@ int vfs_getattr(const struct path *path, struct kstat *stat,
 {
 	int retval;
 
+#if defined(CONFIG_KSU) && defined(CONFIG_KSU_SUSFS)
+	if (susfs_sus_path_by_path((struct path*)path, &retval, SYSCALL_FAMILY_ALL_ENOENT)) {
+		return retval;
+	}
+#endif
+
 	retval = security_inode_getattr(path);
 	if (retval)
 		return retval;
@@ -374,6 +384,11 @@ static int cp_new_stat(struct kstat *stat, struct stat __user *statbuf)
 #endif
 	tmp.st_blocks = stat->blocks;
 	tmp.st_blksize = stat->blksize;
+
+#if defined(CONFIG_KSU) && defined(CONFIG_KSU_SUSFS)
+	susfs_sus_kstat(tmp.st_ino, &tmp);
+#endif
+
 	return copy_to_user(statbuf,&tmp,sizeof(tmp)) ? -EFAULT : 0;
 }
 
diff --git a/fs/susfs.c b/fs/susfs.c
new file mode 100644
index 000000000..245e07536
--- /dev/null
+++ b/fs/susfs.c
@@ -0,0 +1,1003 @@
+#include <linux/cred.h>
+#include <linux/fs.h>
+#include <linux/path.h>
+#include <linux/slab.h>
+#include <linux/seq_file.h>
+#include <linux/printk.h>
+#include <linux/mount.h>
+#include <linux/namei.h>
+#include <linux/list.h>
+#include <linux/init_task.h>
+#include <linux/spinlock.h>
+#include <linux/stat.h>
+#include <linux/uaccess.h>
+#include <linux/version.h>
+#include <linux/susfs.h>
+
+LIST_HEAD(LH_SUS_PATH);
+LIST_HEAD(LH_KSTAT_SPOOFER);
+LIST_HEAD(LH_SUS_MOUNT);
+LIST_HEAD(LH_MAPS_SPOOFER);
+LIST_HEAD(LH_SUS_PROC_FD_LINK);
+LIST_HEAD(LH_TRY_UMOUNT_PATH);
+struct st_susfs_uname my_uname;
+
+spinlock_t susfs_spin_lock;
+bool is_log_enable = true;
+#define SUSFS_LOGI(fmt, ...) if (is_log_enable) pr_info("susfs: " fmt, ##__VA_ARGS__)
+#define SUSFS_LOGE(fmt, ...) if (is_log_enable) pr_err("susfs: " fmt, ##__VA_ARGS__)
+
+
+int susfs_add_sus_path(struct st_susfs_sus_path* __user user_info) {
+    struct st_susfs_sus_path_list *cursor, *temp;
+    struct st_susfs_sus_path_list *new_list = NULL;
+	struct st_susfs_sus_path info;
+
+	if (copy_from_user(&info, user_info, sizeof(struct st_susfs_sus_path))) {
+		SUSFS_LOGE("failed copying from userspace\n");
+		return 1;
+	}
+
+    list_for_each_entry_safe(cursor, temp, &LH_SUS_PATH, list) {
+        if (!strcmp(info.target_pathname, cursor->info.target_pathname)) {
+            SUSFS_LOGE("target_pathname: '%s' is already created in LH_SUS_PATH\n", info.target_pathname);
+            return 1;
+        }
+    }
+
+    new_list = kmalloc(sizeof(struct st_susfs_sus_path_list), GFP_KERNEL);
+    if (!new_list) {
+		SUSFS_LOGE("No enough memory\n");
+		return 1;
+	}
+
+	memcpy(&new_list->info, &info, sizeof(struct st_susfs_sus_path));
+
+    INIT_LIST_HEAD(&new_list->list);
+    spin_lock(&susfs_spin_lock);
+    list_add_tail(&new_list->list, &LH_SUS_PATH);
+    spin_unlock(&susfs_spin_lock);
+    SUSFS_LOGI("target_pathname: '%s' is successfully added to LH_SUS_PATH\n", info.target_pathname);
+    return 0;
+}
+
+int susfs_add_sus_mount(struct st_susfs_sus_mount* __user user_info) {
+    struct st_susfs_sus_mount_list *cursor, *temp;
+    struct st_susfs_sus_mount_list *new_list = NULL;
+	struct st_susfs_sus_mount info;
+	unsigned long encoded_target_dev;
+
+	if (copy_from_user(&info, user_info, sizeof(struct st_susfs_sus_mount))) {
+		SUSFS_LOGE("failed copying from userspace\n");
+		return 1;
+	}
+#if defined(__ARCH_WANT_STAT64) || defined(__ARCH_WANT_COMPAT_STAT64)
+#ifdef CONFIG_MIPS
+	encoded_target_dev = new_decode_dev(info.target_dev);
+#else
+	encoded_target_dev = huge_decode_dev(info.target_dev);
+#endif /* CONFIG_MIPS */
+#else /* defined(__ARCH_WANT_STAT64) || defined(__ARCH_WANT_COMPAT_STAT64) */
+	encoded_target_dev = old_decode_dev(info.target_dev);
+#endif /* defined(__ARCH_WANT_STAT64) || defined(__ARCH_WANT_COMPAT_STAT64) */
+
+    list_for_each_entry_safe(cursor, temp, &LH_SUS_MOUNT, list) {
+        if (cursor->info.target_dev == encoded_target_dev &&
+		    !strcmp(cursor->info.target_pathname, info.target_pathname)) {
+		//if (info.target_dev == cursor->info.target_dev) {
+            SUSFS_LOGE("target_dev: '0x%x', target_pathname: '%s' is already created in LH_SUS_MOUNT\n", cursor->info.target_dev, cursor->info.target_pathname);
+            return 1;
+        }
+    }
+
+    new_list = kmalloc(sizeof(struct st_susfs_sus_mount_list), GFP_KERNEL);
+    if (!new_list) {
+		SUSFS_LOGE("No enough memory\n");
+		return 1;
+	}
+
+	memcpy(&new_list->info, &info, sizeof(struct st_susfs_sus_mount));
+	new_list->info.target_dev = encoded_target_dev;
+
+    INIT_LIST_HEAD(&new_list->list);
+    spin_lock(&susfs_spin_lock);
+    list_add_tail(&new_list->list, &LH_SUS_MOUNT);
+    spin_unlock(&susfs_spin_lock);
+    SUSFS_LOGI("target_dev: '0x%x', target_pathname: '%s', is successfully added to LH_SUS_MOUNT\n", new_list->info.target_dev, new_list->info.target_pathname);
+    return 0;
+}
+
+int susfs_add_sus_kstat(struct st_susfs_sus_kstat* __user user_info) {
+    struct st_susfs_sus_kstat_list *cursor, *temp;
+    struct st_susfs_sus_kstat_list *new_list = NULL;
+	struct st_susfs_sus_kstat info;
+
+	if (copy_from_user(&info, user_info, sizeof(struct st_susfs_sus_kstat))) {
+		SUSFS_LOGE("failed copying from userspace\n");
+		return 1;
+	}
+
+    list_for_each_entry_safe(cursor, temp, &LH_KSTAT_SPOOFER, list) {
+        if (cursor->info.target_ino == info.target_ino) {
+            if (info.target_pathname[0] != '\0') {
+                SUSFS_LOGE("target_pathname: '%s' is already created in LH_KSTAT_SPOOFER\n", info.target_pathname);
+            } else {
+                SUSFS_LOGE("target_ino: '%lu' is already created in LH_KSTAT_SPOOFER\n", info.target_ino);
+            }
+            return 1;
+        }
+    }
+
+    new_list = kmalloc(sizeof(struct st_susfs_sus_kstat_list), GFP_KERNEL);
+    if (!new_list) {
+		SUSFS_LOGE("No enough memory\n");
+		return 1;
+	}
+
+	memcpy(&new_list->info, &info, sizeof(struct st_susfs_sus_kstat));
+	/* Seems the dev number issue is finally solved, the userspace stat we see is already a encoded dev
+	 * which is set by new_encode_dev() / huge_encode_dev() function for 64bit system and 
+	 * old_encode_dev() for 32bit only system, that's why we need to decode it in kernel as well,
+	 * and different kernel may have different function to encode the dev number, be cautious!
+	 * Also check your encode_dev() macro in fs/stat.c to determine which one to use 
+	 */
+#if defined(__ARCH_WANT_STAT64) || defined(__ARCH_WANT_COMPAT_STAT64)
+#ifdef CONFIG_MIPS
+	new_list->info.spoofed_dev = new_decode_dev(new_list->info.spoofed_dev);
+#else
+	new_list->info.spoofed_dev = huge_decode_dev(new_list->info.spoofed_dev);
+#endif /* CONFIG_MIPS */
+#else
+	new_list->info.spoofed_dev = old_decode_dev(new_list->info.spoofed_dev);
+#endif /* defined(__ARCH_WANT_STAT64) || defined(__ARCH_WANT_COMPAT_STAT64) */
+    INIT_LIST_HEAD(&new_list->list);
+    spin_lock(&susfs_spin_lock);
+    list_add_tail(&new_list->list, &LH_KSTAT_SPOOFER);
+    spin_unlock(&susfs_spin_lock);
+	SUSFS_LOGI("target_ino: '%lu', target_pathname: '%s', spoofed_pathname: '%s', spoofed_ino: '%lu', spoofed_dev: '%lu', spoofed_nlink: '%u', spoofed_atime_tv_sec: '%ld', spoofed_mtime_tv_sec: '%ld', spoofed_ctime_tv_sec: '%ld', spoofed_atime_tv_nsec: '%ld', spoofed_mtime_tv_nsec: '%ld', spoofed_ctime_tv_nsec: '%ld', is successfully added to LH_KSTAT_SPOOFER\n",
+		new_list->info.target_ino , new_list->info.target_pathname, new_list->info.spoofed_pathname,
+		new_list->info.spoofed_ino, new_list->info.spoofed_dev, new_list->info.spoofed_nlink,
+		new_list->info.spoofed_atime_tv_sec, new_list->info.spoofed_mtime_tv_sec, new_list->info.spoofed_ctime_tv_sec,
+		new_list->info.spoofed_atime_tv_nsec, new_list->info.spoofed_mtime_tv_nsec, new_list->info.spoofed_ctime_tv_nsec);
+    return 0;
+}
+
+int susfs_update_sus_kstat(struct st_susfs_sus_kstat* __user user_info) {
+    struct st_susfs_sus_kstat_list *cursor, *temp;
+	struct st_susfs_sus_kstat info;
+
+	if (copy_from_user(&info, user_info, sizeof(struct st_susfs_sus_kstat))) {
+		SUSFS_LOGE("failed copying from userspace\n");
+		return 1;
+	}
+
+    list_for_each_entry_safe(cursor, temp, &LH_KSTAT_SPOOFER, list) {
+        if (!strcmp(info.target_pathname, cursor->info.target_pathname)) {
+            SUSFS_LOGI("updating target_ino from '%lu' to '%lu' for pathname: '%s' in LH_KSTAT_SPOOFER\n", cursor->info.target_ino, info.target_ino, info.target_pathname);
+			cursor->info.target_ino = info.target_ino;
+            return 0;
+        }
+    }
+
+	SUSFS_LOGE("target_pathname: '%s' is not found in LH_KSTAT_SPOOFER\n", info.target_pathname);
+	return 1;
+}
+
+int susfs_add_sus_maps(struct st_susfs_sus_maps* __user user_info) {
+    struct st_susfs_sus_maps_list *cursor, *temp;
+    struct st_susfs_sus_maps_list *new_list = NULL;
+	struct st_susfs_sus_maps info;
+	
+	if (copy_from_user(&info, user_info, sizeof(struct st_susfs_sus_maps))) {
+		SUSFS_LOGE("failed copying from userspace\n");
+		return 1;
+	}
+
+#if defined(__ARCH_WANT_STAT64) || defined(__ARCH_WANT_COMPAT_STAT64)
+#ifdef CONFIG_MIPS
+	info.target_dev = new_decode_dev(info.target_dev);
+#else
+	info.target_dev = huge_decode_dev(info.target_dev);
+#endif /* CONFIG_MIPS */
+#else
+	info.target_dev = old_decode_dev(info.target_dev);
+#endif /* defined(__ARCH_WANT_STAT64) || defined(__ARCH_WANT_COMPAT_STAT64) */
+
+    list_for_each_entry_safe(cursor, temp, &LH_MAPS_SPOOFER, list) {
+		if (cursor->info.is_statically == info.is_statically && !info.is_statically) {
+			if (cursor->info.target_ino == info.target_ino) {
+				SUSFS_LOGE("is_statically: '%d', target_ino: '%lu', is already created in LH_MAPS_SPOOFER\n",
+				info.is_statically, info.target_ino);
+				return 1;
+			}
+		} else if (cursor->info.is_statically == info.is_statically && info.is_statically) {
+			if (cursor->info.compare_mode == info.compare_mode && info.compare_mode == 1) {
+				if (cursor->info.target_ino == info.target_ino) {
+					SUSFS_LOGE("is_statically: '%d', compare_mode: '%d', target_ino: '%lu', is already created in LH_MAPS_SPOOFER\n",
+					info.is_statically, info.compare_mode, info.target_ino);
+					return 1;
+				}
+			} else if (cursor->info.compare_mode == info.compare_mode && info.compare_mode == 2) {
+				if (cursor->info.target_ino == info.target_ino &&
+					cursor->info.is_isolated_entry == info.is_isolated_entry &&
+				    cursor->info.target_pgoff == info.target_pgoff &&
+					cursor->info.target_prot == info.target_prot) {
+					SUSFS_LOGE("is_statically: '%d', compare_mode: '%d', target_ino: '%lu', is_isolated_entry: '%d', target_pgoff: '0x%x', target_prot: '0x%x', is already created in LH_MAPS_SPOOFER\n",
+					info.is_statically, info.compare_mode, info.target_ino,
+					info.is_isolated_entry, info.target_pgoff, info.target_prot);
+					return 1;
+				}
+			} else if (cursor->info.compare_mode == info.compare_mode && info.compare_mode == 3) {
+				if (info.target_ino == 0 &&
+					cursor->info.prev_target_ino == info.prev_target_ino &&
+				    cursor->info.next_target_ino == info.next_target_ino) {
+					SUSFS_LOGE("is_statically: '%d', compare_mode: '%d', target_ino: '%lu', prev_target_ino: '%lu', next_target_ino: '%lu', is already created in LH_MAPS_SPOOFER\n",
+					info.is_statically, info.compare_mode, info.target_ino,
+					info.prev_target_ino, info.next_target_ino);
+					return 1;
+				}
+			} else if (cursor->info.compare_mode == info.compare_mode && info.compare_mode == 4) {
+				if (cursor->info.is_file == info.is_file &&
+					cursor->info.target_dev == info.target_dev &&
+				    cursor->info.target_pgoff == info.target_pgoff &&
+				    cursor->info.target_prot == info.target_prot &&
+				    cursor->info.target_addr_size == info.target_addr_size) {
+					SUSFS_LOGE("is_statically: '%d', compare_mode: '%d', is_file: '%d', target_dev: '0x%x', target_pgoff: '0x%x', target_prot: '0x%x', target_addr_size: '0x%x', is already created in LH_MAPS_SPOOFER\n",
+					info.is_statically, info.compare_mode, info.is_file,
+					info.target_dev, info.target_pgoff, info.target_prot,
+					info.target_addr_size);
+					return 1;
+				}
+			}
+		}
+    }
+
+    new_list = kmalloc(sizeof(struct st_susfs_sus_maps_list), GFP_KERNEL);
+    if (!new_list) {
+		SUSFS_LOGE("No enough memory\n");
+		return 1;
+	}
+
+	memcpy(&new_list->info, &info, sizeof(struct st_susfs_sus_maps));
+#if defined(__ARCH_WANT_STAT64) || defined(__ARCH_WANT_COMPAT_STAT64)
+#ifdef CONFIG_MIPS
+	new_list->info.spoofed_dev = new_decode_dev(new_list->info.spoofed_dev);
+#else
+	new_list->info.spoofed_dev = huge_decode_dev(new_list->info.spoofed_dev);
+#endif /* CONFIG_MIPS */
+#else
+	new_list->info.spoofed_dev = old_decode_dev(new_list->info.spoofed_dev);
+#endif /* defined(__ARCH_WANT_STAT64) || defined(__ARCH_WANT_COMPAT_STAT64) */
+    INIT_LIST_HEAD(&new_list->list);
+    spin_lock(&susfs_spin_lock);
+    list_add_tail(&new_list->list, &LH_MAPS_SPOOFER);
+    spin_unlock(&susfs_spin_lock);
+
+	SUSFS_LOGI("is_statically: '%d', compare_mode: '%d', is_isolated_entry: '%d', is_file: '%d', prev_target_ino: '%lu', next_target_ino: '%lu', target_ino: '%lu', target_dev: '0x%x', target_pgoff: '0x%x', target_prot: '0x%x', target_addr_size: '0x%x', spoofed_pathname: '%s', spoofed_ino: '%lu', spoofed_dev: '0x%x', spoofed_pgoff: '0x%x', spoofed_prot: '0x%x', is successfully added to LH_MAPS_SPOOFER\n",
+	new_list->info.is_statically, new_list->info.compare_mode, new_list->info.is_isolated_entry,
+	new_list->info.is_file, new_list->info.prev_target_ino, new_list->info.next_target_ino,
+	new_list->info.target_ino, new_list->info.target_dev, new_list->info.target_pgoff,
+	new_list->info.target_prot, new_list->info.target_addr_size, new_list->info.spoofed_pathname,
+	new_list->info.spoofed_ino, new_list->info.spoofed_dev, new_list->info.spoofed_pgoff,
+	new_list->info.spoofed_prot);
+
+    return 0;
+}
+
+int susfs_update_sus_maps(struct st_susfs_sus_maps* __user user_info) {
+    struct st_susfs_sus_maps_list *cursor, *temp;
+	struct st_susfs_sus_maps info;
+
+	if (copy_from_user(&info, user_info, sizeof(struct st_susfs_sus_maps))) {
+		SUSFS_LOGE("failed copying from userspace\n");
+		return 1;
+	}
+
+    list_for_each_entry_safe(cursor, temp, &LH_MAPS_SPOOFER, list) {
+		if (cursor->info.is_statically == info.is_statically && !info.is_statically) {
+			if (!strcmp(info.target_pathname, cursor->info.target_pathname)) {
+				SUSFS_LOGI("updating target_ino from '%lu' to '%lu' for pathname: '%s' in LH_MAPS_SPOOFER\n", cursor->info.target_ino, info.target_ino, info.target_pathname);
+				cursor->info.target_ino = info.target_ino;
+				return 0;
+			}
+		}
+    }
+
+	SUSFS_LOGE("target_pathname: '%s' is not found in LH_MAPS_SPOOFER\n", info.target_pathname);
+	return 1;
+}
+
+int susfs_add_sus_proc_fd_link(struct st_susfs_sus_proc_fd_link* __user user_info) {
+    struct st_susfs_sus_proc_fd_link_list *cursor, *temp;
+    struct st_susfs_sus_proc_fd_link_list *new_list = NULL;
+	struct st_susfs_sus_proc_fd_link info;
+
+	if (copy_from_user(&info, user_info, sizeof(struct st_susfs_sus_proc_fd_link))) {
+		SUSFS_LOGE("failed copying from userspace\n");
+		return 1;
+	}
+
+    list_for_each_entry_safe(cursor, temp, &LH_SUS_PROC_FD_LINK, list) {
+        if (!strcmp(info.target_link_name, cursor->info.target_link_name)) {
+            SUSFS_LOGE("target_link_name: '%s' is already created in LH_SUS_PROC_FD_LINK\n", info.target_link_name);
+            return 1;
+        }
+    }
+
+    new_list = kmalloc(sizeof(struct st_susfs_sus_proc_fd_link_list), GFP_KERNEL);
+    if (!new_list) {
+		SUSFS_LOGE("No enough memory\n");
+		return 1;
+	}
+
+	memcpy(&new_list->info, &info, sizeof(struct st_susfs_sus_proc_fd_link));
+
+    INIT_LIST_HEAD(&new_list->list);
+    spin_lock(&susfs_spin_lock);
+    list_add_tail(&new_list->list, &LH_SUS_PROC_FD_LINK);
+    spin_unlock(&susfs_spin_lock);
+    SUSFS_LOGI("target_link_name: '%s', spoofed_link_name: '%s', is successfully added to LH_SUS_PROC_FD_LINK\n",
+				new_list->info.target_link_name, new_list->info.spoofed_link_name);
+    return 0;
+}
+
+int susfs_add_try_umount(struct st_susfs_try_umount* __user user_info) {
+    struct st_susfs_try_umount_list *cursor, *temp;
+    struct st_susfs_try_umount_list *new_list = NULL;
+	struct st_susfs_try_umount info;
+
+	if (copy_from_user(&info, user_info, sizeof(struct st_susfs_try_umount))) {
+		SUSFS_LOGE("failed copying from userspace\n");
+		return 1;
+	}
+
+    list_for_each_entry_safe(cursor, temp, &LH_TRY_UMOUNT_PATH, list) {
+        if (!strcmp(info.target_pathname, cursor->info.target_pathname)) {
+            SUSFS_LOGE("target_pathname: '%s' is already created in LH_TRY_UMOUNT_PATH\n", info.target_pathname);
+            return 1;
+        }
+    }
+
+    new_list = kmalloc(sizeof(struct st_susfs_try_umount_list), GFP_KERNEL);
+    if (!new_list) {
+		SUSFS_LOGE("No enough memory\n");
+		return 1;
+	}
+
+	memcpy(&new_list->info, &info, sizeof(struct st_susfs_try_umount));
+
+    INIT_LIST_HEAD(&new_list->list);
+    spin_lock(&susfs_spin_lock);
+    list_add_tail(&new_list->list, &LH_TRY_UMOUNT_PATH);
+    spin_unlock(&susfs_spin_lock);
+    SUSFS_LOGI("target_pathname: '%s', mnt_mode: %d, is successfully added to LH_TRY_UMOUNT_PATH\n", new_list->info.target_pathname, new_list->info.mnt_mode);
+    return 0;
+}
+
+int susfs_set_uname(struct st_susfs_uname* __user user_info) {
+	struct st_susfs_uname info;
+
+	if (copy_from_user(&info, user_info, sizeof(struct st_susfs_uname))) {
+		SUSFS_LOGE("failed copying from userspace.\n");
+		return 1;
+	}
+
+	spin_lock(&susfs_spin_lock);
+	strncpy(my_uname.sysname, info.sysname, __NEW_UTS_LEN);
+	strncpy(my_uname.nodename, info.nodename, __NEW_UTS_LEN);
+	strncpy(my_uname.release, info.release, __NEW_UTS_LEN);
+	strncpy(my_uname.version, info.version, __NEW_UTS_LEN);
+	strncpy(my_uname.machine, info.machine, __NEW_UTS_LEN);
+	SUSFS_LOGI("Setting sysname: '%s', nodename: '%s', release: '%s', version: '%s', machine: '%s'\n",
+				my_uname.sysname, my_uname.nodename, my_uname.release, my_uname.version, my_uname.machine);
+    spin_unlock(&susfs_spin_lock);
+	return 0;
+}
+
+int susfs_sus_path_by_path(struct path* file, int* errno_to_be_changed, int syscall_family) {
+	size_t size = 4096;
+	int res = -1;
+	int status = 0;
+	char* path = NULL;
+	char* ptr = NULL;
+	char* end = NULL;
+	struct st_susfs_sus_path_list *cursor, *temp;
+
+	if (!uid_matches_suspicious_path() || file == NULL) {
+		status = 0;
+		goto out;
+	}
+
+	path = kmalloc(size, GFP_KERNEL);
+
+	if (path == NULL) {
+		status = -1;
+		return status;
+	}
+
+	ptr = d_path(file, path, size);
+
+	if (IS_ERR(ptr)) {
+		status = -1;
+		goto out;
+	}
+
+	end = mangle_path(path, ptr, " \t\n\\");
+
+	if (!end) {
+		status = -1;
+		goto out;
+	}
+
+	res = end - path;
+	path[(size_t) res] = '\0';
+
+    list_for_each_entry_safe(cursor, temp, &LH_SUS_PATH, list) {
+        if (!strcmp(cursor->info.target_pathname, path)) {
+            SUSFS_LOGI("hiding target_pathname: '%s', target_ino: '%lu', for UID %i\n", cursor->info.target_pathname, cursor->info.target_ino, current_uid().val);
+			if (errno_to_be_changed != NULL) {
+				susfs_change_error_no_by_pathname(path, errno_to_be_changed, syscall_family);
+			}
+			status = 1;
+			goto out;
+        }
+    }
+
+out:
+	kfree(path);
+	return status;
+}
+
+int susfs_sus_path_by_filename(struct filename* name, int* errno_to_be_changed, int syscall_family) {
+	int status = 0;
+	int ret = 0;
+	struct path path;
+
+	if (IS_ERR(name)) {
+		return -1;
+	}
+
+	if (!uid_matches_suspicious_path() || name == NULL) {
+		return 0;
+	}
+
+	ret = kern_path(name->name, LOOKUP_FOLLOW, &path);
+
+	if (!ret) {
+		status = susfs_sus_path_by_path(&path, errno_to_be_changed, syscall_family);
+		path_put(&path);
+	}
+
+	return status;
+}
+
+int susfs_sus_ino_for_filldir64(unsigned long ino) {
+    struct st_susfs_sus_path_list *cursor, *temp;
+
+	if (!uid_matches_suspicious_path()) return 0;
+	list_for_each_entry_safe(cursor, temp, &LH_SUS_PATH, list) {
+        if (cursor->info.target_ino == ino) {
+            SUSFS_LOGI("hiding target_pathname: '%s', target_ino: '%lu', for UID %i\n", cursor->info.target_pathname, cursor->info.target_ino, current_uid().val);
+			return 1;
+        }
+    }
+	return 0;
+}
+
+int susfs_sus_mount(struct vfsmount* mnt, struct path* root) {
+	size_t size = 4096;
+	int res = -1;
+	int status = 0;
+	char* path = NULL;
+	char* ptr = NULL;
+	char* end = NULL;
+	struct path mnt_path = {
+		.dentry = mnt->mnt_root,
+		.mnt = mnt
+	};
+	struct st_susfs_sus_mount_list *cursor, *temp;
+
+	//if (!uid_matches_suspicious_mount()) return status;
+
+	path = kmalloc(size, GFP_KERNEL);
+
+	if (path == NULL) {
+		status = -1;
+		return status;
+	}
+
+	ptr = __d_path(&mnt_path, root, path, size);
+
+	if (!ptr) {
+		status = -1;
+		goto out;
+	}
+
+	end = mangle_path(path, ptr, " \t\n\\");
+
+	if (!end) {
+		status = -1;
+		goto out;
+	}
+
+	res = end - path;
+	path[(size_t) res] = '\0';
+
+	list_for_each_entry_safe(cursor, temp, &LH_SUS_MOUNT, list) {
+        if (!strcmp(path, cursor->info.target_pathname)) {
+			SUSFS_LOGI("target_dev: '%lu', target_pathname '%s' won't be shown to process with UID %i\n",
+						cursor->info.target_dev, cursor->info.target_pathname, current_uid().val);
+			status = 1;
+			goto out;
+        }
+	}
+
+out:
+	kfree(path);
+	return status;
+}
+
+void susfs_sus_kstat(unsigned long ino, struct stat* out_stat) {
+    struct st_susfs_sus_kstat_list *cursor, *temp;
+
+	if (!uid_matches_suspicious_kstat()) return;
+	list_for_each_entry_safe(cursor, temp, &LH_KSTAT_SPOOFER, list) {
+		if (cursor->info.target_ino == ino) {
+            SUSFS_LOGI("spoofing kstat for pathname '%s' for UID %i\n", cursor->info.target_pathname, current_uid().val);
+			out_stat->st_ino = cursor->info.spoofed_ino;
+#if defined(__ARCH_WANT_STAT64) || defined(__ARCH_WANT_COMPAT_STAT64)
+#ifdef CONFIG_MIPS
+			out_stat->st_dev = new_encode_dev(cursor->info.spoofed_dev);
+#else
+			out_stat->st_dev = huge_encode_dev(cursor->info.spoofed_dev);
+#endif /* CONFIG_MIPS */
+#else
+			out_stat->st_dev = old_encode_dev(cursor->info.spoofed_dev);
+#endif /* defined(__ARCH_WANT_STAT64) || defined(__ARCH_WANT_COMPAT_STAT64) */
+			out_stat->st_nlink = cursor->info.spoofed_nlink;
+			out_stat->st_atime = cursor->info.spoofed_atime_tv_sec;
+			out_stat->st_mtime = cursor->info.spoofed_mtime_tv_sec;
+			out_stat->st_ctime = cursor->info.spoofed_ctime_tv_sec;
+#ifdef _STRUCT_TIMESPEC
+			out_stat->st_atime_nsec = cursor->info.spoofed_atime_tv_nsec;
+			out_stat->st_mtime_nsec = cursor->info.spoofed_mtime_tv_nsec;
+			out_stat->st_ctime_nsec = cursor->info.spoofed_ctime_tv_nsec;
+#endif
+			return;
+        }
+    }
+}
+
+/* for non statically, it only compare with target_ino, and spoof only the ino, dev to the matched entry
+ * for staticially, it compares depending on the mode user chooses
+ * compare mode:
+ *  1 -> target_ino is 'non-zero', all entries match with target_ino will be spoofed with user defined entry
+ *  2 -> target_ino is 'non-zero', all entries match with [target_ino,target_prot,target_pgoff,is_isolated_entry] will be spoofed with user defined entry
+ *  3 -> target_ino is 'zero', which is not file, all entries match with [prev_target_ino,next_target_ino] will be spoofed with user defined entry
+ *  4 -> target_ino is 'zero' or 'non-zero', all entries match with [is_file,target_addr_size,target_prot,target_pgoff,target_dev] will be spoofed with user defined entry
+ */
+int susfs_sus_maps(unsigned long target_ino, unsigned long target_address_size, unsigned long* orig_ino, dev_t* orig_dev, vm_flags_t* flags, unsigned long long* pgoff, struct vm_area_struct* vma, char* tmpname) {
+    struct st_susfs_sus_maps_list *cursor, *temp;
+	struct inode *tmp_inode, *tmp_inode_prev, *tmp_inode_next;
+
+	//if (!uid_matches_suspicious_maps()) return 0;
+	list_for_each_entry_safe(cursor, temp, &LH_MAPS_SPOOFER, list) {
+		// if it is NOT statically
+		if (!cursor->info.is_statically) {
+			if (target_ino != 0 && cursor->info.target_ino == target_ino) {
+				*orig_ino = cursor->info.spoofed_ino;
+				*orig_dev = cursor->info.spoofed_dev;
+				SUSFS_LOGI("spoofing maps -> is_statically: '%d', compare_mode: '%d', is_file: '%d', is_isolated_entry: '%d', prev_target_ino: '%lu', next_target_ino: '%lu', target_ino: '%lu', target_dev: '0x%x', target_pgoff: '0x%x', target_prot: '0x%x', target_addr_size: '0x%x', spoofed_pathname: '%s', spoofed_ino: '%lu', spoofed_dev: '0x%x', spoofed_pgoff: '0x%x', spoofed_prot: '0x%x'\n",
+				cursor->info.is_statically, cursor->info.compare_mode, cursor->info.is_file,
+				cursor->info.is_isolated_entry, cursor->info.prev_target_ino, cursor->info.next_target_ino,
+				cursor->info.target_ino, cursor->info.target_dev, cursor->info.target_pgoff,
+				cursor->info.target_prot, cursor->info.target_addr_size, cursor->info.spoofed_pathname,
+				cursor->info.spoofed_ino, cursor->info.spoofed_dev, cursor->info.spoofed_pgoff,
+				cursor->info.spoofed_prot);
+				return 1;
+			}
+		// if it is statically, then compare with compare_mode
+		} else if (cursor->info.compare_mode > 0) {
+			switch(cursor->info.compare_mode) {
+				case 1:
+					if (target_ino != 0 && cursor->info.target_ino == target_ino) {
+						goto do_spoof;
+					}
+					break;
+				case 2:
+					if (target_ino != 0 && cursor->info.target_ino == target_ino &&
+						((cursor->info.target_prot & VM_READ) == (*flags & VM_READ)) &&
+						((cursor->info.target_prot & VM_WRITE) == (*flags & VM_WRITE)) &&
+						((cursor->info.target_prot & VM_EXEC) == (*flags & VM_EXEC)) &&
+						((cursor->info.target_prot & VM_MAYSHARE) == (*flags & VM_MAYSHARE)) &&
+						cursor->info.target_pgoff == *pgoff) {
+						// if is NOT isolated_entry, check for vma->vm_next and vma->vm_prev to see if they have the same inode
+						if (!cursor->info.is_isolated_entry) {
+							if (vma && vma->vm_next && vma->vm_next->vm_file) {
+								tmp_inode = file_inode(vma->vm_next->vm_file);
+								if (tmp_inode->i_ino == cursor->info.target_ino ||
+								    tmp_inode->i_ino == (cursor->info.target_ino+1) ||
+									tmp_inode->i_ino == (cursor->info.target_ino-1)) {
+									goto do_spoof;
+								}
+							}
+							if (vma && vma->vm_prev && vma->vm_prev->vm_file) {
+								tmp_inode = file_inode(vma->vm_prev->vm_file);
+								if (tmp_inode->i_ino == cursor->info.target_ino ||
+								    tmp_inode->i_ino == (cursor->info.target_ino+1) ||
+									tmp_inode->i_ino == (cursor->info.target_ino-1)) {
+									goto do_spoof;
+								}
+							}
+						// if it is isolated_entry
+						} else {
+							if (vma && vma->vm_next && vma->vm_next->vm_file) {
+								tmp_inode = file_inode(vma->vm_next->vm_file);
+								if (tmp_inode->i_ino == cursor->info.target_ino) {
+									continue;
+								}
+							}
+							if (vma && vma->vm_prev && vma->vm_prev->vm_file) {
+								tmp_inode = file_inode(vma->vm_prev->vm_file);
+								if (tmp_inode->i_ino == cursor->info.target_ino) {
+									continue;
+								}
+							}
+							// both prev and next don't have the same indoe as current entry, we can spoof now
+							goto do_spoof;
+						}
+					}
+					break;
+				case 3:
+					// if current vma is a file, it is not our target
+					if (vma->vm_file) continue;
+					// compare next target ino only
+					if (cursor->info.prev_target_ino == 0 && cursor->info.next_target_ino > 0) {
+						if (vma->vm_next && vma->vm_next->vm_file) {
+							tmp_inode_next = file_inode(vma->vm_next->vm_file);
+							if (tmp_inode_next->i_ino == cursor->info.next_target_ino) {
+								goto do_spoof;
+							}
+						}
+					// compare prev target ino only
+					} else if (cursor->info.prev_target_ino > 0 && cursor->info.next_target_ino == 0) {
+						if (vma->vm_prev && vma->vm_prev->vm_file) {
+							tmp_inode_prev = file_inode(vma->vm_prev->vm_file);
+							if (tmp_inode_prev->i_ino == cursor->info.prev_target_ino) {
+								goto do_spoof;
+							}
+						}
+					// compare both prev ino and next ino
+					} else if (cursor->info.prev_target_ino > 0 && cursor->info.next_target_ino > 0) {
+						if (vma->vm_prev && vma->vm_prev->vm_file &&
+							vma->vm_next && vma->vm_next->vm_file) {
+							tmp_inode_prev = file_inode(vma->vm_prev->vm_file);
+							tmp_inode_next = file_inode(vma->vm_next->vm_file);
+							if (tmp_inode_prev->i_ino == cursor->info.prev_target_ino &&
+							    tmp_inode_next->i_ino == cursor->info.next_target_ino) {
+								goto do_spoof;
+							}
+						}
+					}
+					break;
+				case 4:
+					if ((cursor->info.is_file && vma->vm_file)||(!cursor->info.is_file && !vma->vm_file)) {
+						if (cursor->info.target_dev == *orig_dev &&
+							cursor->info.target_pgoff == *pgoff &&
+							((cursor->info.target_prot & VM_READ) == (*flags & VM_READ) &&
+							 (cursor->info.target_prot & VM_WRITE) == (*flags & VM_WRITE) &&
+							 (cursor->info.target_prot & VM_EXEC) == (*flags & VM_EXEC) &&
+							 (cursor->info.target_prot & VM_MAYSHARE) == (*flags & VM_MAYSHARE)) &&
+							cursor->info.target_addr_size == target_address_size) {
+							goto do_spoof;
+						}
+					}
+					break;
+				default:
+					break;
+			}
+		}
+		continue;
+do_spoof:
+		if (cursor->info.need_to_spoof_pathname) {
+			strncpy(tmpname, cursor->info.spoofed_pathname, SUSFS_MAX_LEN_PATHNAME);
+		}
+		if (cursor->info.need_to_spoof_ino) {
+			*orig_ino = cursor->info.spoofed_ino;
+		}
+		if (cursor->info.need_to_spoof_dev) {
+			*orig_dev = cursor->info.spoofed_dev;
+		}
+		if (cursor->info.need_to_spoof_prot) {
+			if (cursor->info.spoofed_prot & VM_READ) *flags |= VM_READ;
+			else *flags = ((*flags | VM_READ) ^ VM_READ);
+			if (cursor->info.spoofed_prot & VM_WRITE) *flags |= VM_WRITE;
+			else *flags = ((*flags | VM_WRITE) ^ VM_WRITE);
+			if (cursor->info.spoofed_prot & VM_EXEC) *flags |= VM_EXEC;
+			else *flags = ((*flags | VM_EXEC) ^ VM_EXEC);
+			if (cursor->info.spoofed_prot & VM_MAYSHARE) *flags |= VM_MAYSHARE;
+			else *flags = ((*flags | VM_MAYSHARE) ^ VM_MAYSHARE);
+		}
+		if (cursor->info.need_to_spoof_pgoff) {
+			*pgoff = cursor->info.spoofed_pgoff;
+		}
+		SUSFS_LOGI("spoofing maps -> is_statically: '%d', compare_mode: '%d', is_file: '%d', is_isolated_entry: '%d', prev_target_ino: '%lu', next_target_ino: '%lu', target_ino: '%lu', target_dev: '0x%x', target_pgoff: '0x%x', target_prot: '0x%x', target_addr_size: '0x%x', spoofed_pathname: '%s', spoofed_ino: '%lu', spoofed_dev: '0x%x', spoofed_pgoff: '0x%x', spoofed_prot: '0x%x'\n",
+		cursor->info.is_statically, cursor->info.compare_mode, cursor->info.is_file,
+		cursor->info.is_isolated_entry, cursor->info.prev_target_ino, cursor->info.next_target_ino,
+		cursor->info.target_ino, cursor->info.target_dev, cursor->info.target_pgoff,
+		cursor->info.target_prot, cursor->info.target_addr_size, cursor->info.spoofed_pathname,
+		cursor->info.spoofed_ino, cursor->info.spoofed_dev, cursor->info.spoofed_pgoff,
+		cursor->info.spoofed_prot);
+		return 2;
+    }
+	return 0;
+}
+
+void susfs_sus_proc_fd_link(char *pathname, int len) {
+	struct st_susfs_sus_proc_fd_link_list *cursor, *temp;
+
+	if (!uid_matches_suspicious_proc_fd_link()) {
+		return;
+	}
+
+	list_for_each_entry_safe(cursor, temp, &LH_SUS_PROC_FD_LINK, list) {
+        if (!strcmp(pathname, cursor->info.target_link_name)) {
+			if (strlen(cursor->info.spoofed_link_name) >= len) {
+				SUSFS_LOGE("[uid:%u] Cannot spoof fd link: '%s' -> '%s', as spoofed_link_name size is bigger than %d\n", current_uid().val, pathname, cursor->info.spoofed_link_name, len);
+				return;
+			}
+            SUSFS_LOGI("[uid:%u] spoofing fd link: '%s' -> '%s'\n", current_uid().val, pathname, cursor->info.spoofed_link_name);
+			strcpy(pathname, cursor->info.spoofed_link_name);
+			return;
+        }
+    }
+}
+
+static void umount_mnt(struct path *path, int flags) {
+	int err = path_umount(path, flags);
+	if (err) {
+		SUSFS_LOGI("umount %s failed: %d\n", path->dentry->d_iname, err);
+	}
+}
+
+static bool should_umount(struct path *path)
+{
+	if (!path) {
+		return false;
+	}
+
+	if (current->nsproxy->mnt_ns == init_nsproxy.mnt_ns) {
+		SUSFS_LOGI("ignore global mnt namespace process: %d\n",
+			current_uid().val);
+		return false;
+	}
+
+	if (path->mnt && path->mnt->mnt_sb && path->mnt->mnt_sb->s_type) {
+		const char *fstype = path->mnt->mnt_sb->s_type->name;
+		return strcmp(fstype, "overlay") == 0;
+	}
+	return false;
+}
+
+static void try_umount(const char *mnt, bool check_mnt, int flags) {
+	struct path path;
+	int err = kern_path(mnt, 0, &path);
+
+	if (err) {
+		return;
+	}
+
+	if (path.dentry != path.mnt->mnt_root) {
+		// it is not root mountpoint, maybe umounted by others already.
+		return;
+	}
+
+	// we are only interest in some specific mounts
+	if (check_mnt && !should_umount(&path)) {
+		return;
+	}
+	
+	umount_mnt(&path, flags);
+}
+
+void susfs_try_umount(uid_t target_uid) {
+    struct st_susfs_try_umount_list *cursor, *temp;
+
+	list_for_each_entry_safe(cursor, temp, &LH_TRY_UMOUNT_PATH, list) {
+		SUSFS_LOGI("umounting '%s' for uid: %d\n", cursor->info.target_pathname, target_uid);
+		if (cursor->info.mnt_mode == 0) {
+        	try_umount(cursor->info.target_pathname, false, 0);
+		} else if (cursor->info.mnt_mode == 1) {
+        	try_umount(cursor->info.target_pathname, false, MNT_DETACH);
+		}
+    }
+}
+
+void susfs_spoof_uname(struct new_utsname* tmp) {
+	if (strcmp(my_uname.sysname, "default")) {
+		memset(tmp->sysname, 0, __NEW_UTS_LEN);
+		strncpy(tmp->sysname, my_uname.sysname, __NEW_UTS_LEN);
+	}
+	if (strcmp(my_uname.nodename, "default")) {
+		memset(tmp->nodename, 0, __NEW_UTS_LEN);
+		strncpy(tmp->nodename, my_uname.nodename, __NEW_UTS_LEN);
+	}
+	if (strcmp(my_uname.release, "default")) {
+		memset(tmp->release, 0, __NEW_UTS_LEN);
+		strncpy(tmp->release, my_uname.release, __NEW_UTS_LEN);
+	}
+	if (strcmp(my_uname.version, "default")) {
+		memset(tmp->version, 0, __NEW_UTS_LEN);
+		strncpy(tmp->version, my_uname.version, __NEW_UTS_LEN);
+	}
+	if (strcmp(my_uname.machine, "default")) {
+		memset(tmp->machine, 0, __NEW_UTS_LEN);
+		strncpy(tmp->machine, my_uname.machine, __NEW_UTS_LEN);
+	}
+}
+
+void susfs_set_log(bool enabled) {
+	spin_lock(&susfs_spin_lock);
+	is_log_enable = enabled;
+	spin_unlock(&susfs_spin_lock);
+	if (is_log_enable) {
+		pr_info("susfs: enable logging to kernel");
+	} else {
+		pr_info("susfs: disable logging to kernel");
+	}
+}
+
+/* For files/directories in /sdcard/ but not in /sdcard/Android/data/, please delete it  
+ * by yourself
+ */
+void susfs_change_error_no_by_pathname(char* const pathname, int* const errno_to_be_changed, int const syscall_family) {
+	if (!strncmp(pathname, "/system/", 8)||
+		!strncmp(pathname, "/vendor/", 8)) {
+		switch(syscall_family) {
+			case SYSCALL_FAMILY_ALL_ENOENT:
+				*errno_to_be_changed = -ENOENT;
+				return;
+			case SYSCALL_FAMILY_LINKAT_OLDNAME:
+				*errno_to_be_changed = -ENOENT;
+				return;
+			case SYSCALL_FAMILY_RENAMEAT2_OLDNAME:
+				*errno_to_be_changed = -EXDEV;
+				return;
+			//case SYSCALL_FAMILY_RENAMEAT2_NEWNAME:
+			//	if (!strncmp(pathname, "/system/", 8)) {
+			//		*errno_to_be_changed = -EROFS;
+			//	} else {
+			//		*errno_to_be_changed = -EXDEV;
+			//	}
+			//	return;
+			default:
+				*errno_to_be_changed = -EROFS;
+				return;
+		}
+	} else if (!strncmp(pathname, "/storage/emulated/0/Android/data/", 33)) {
+		switch(syscall_family) {
+			case SYSCALL_FAMILY_ALL_ENOENT:
+				*errno_to_be_changed = -ENOENT;
+				return;
+			case SYSCALL_FAMILY_MKNOD:
+				*errno_to_be_changed = -EACCES;
+				return;
+			case SYSCALL_FAMILY_MKDIRAT:
+				*errno_to_be_changed = -EACCES;
+				return;
+			case SYSCALL_FAMILY_RMDIR:
+				*errno_to_be_changed = -ENOENT;
+				return;
+			case SYSCALL_FAMILY_UNLINKAT:
+				*errno_to_be_changed = -ENOENT;
+				return;
+			case SYSCALL_FAMILY_SYMLINKAT_NEWNAME:
+				*errno_to_be_changed = -EACCES;
+				return;
+			case SYSCALL_FAMILY_LINKAT_OLDNAME:
+				*errno_to_be_changed = -ENOENT;
+				return;
+			case SYSCALL_FAMILY_LINKAT_NEWNAME:
+				*errno_to_be_changed = -EXDEV;
+				return;
+			case SYSCALL_FAMILY_RENAMEAT2_OLDNAME:
+				*errno_to_be_changed = -EXDEV;
+				return;
+			case SYSCALL_FAMILY_RENAMEAT2_NEWNAME:
+				*errno_to_be_changed = -EXDEV;
+				return;
+			default:
+				*errno_to_be_changed = -ENOENT;
+				return;
+		}
+	} else if (!strncmp(pathname, "/dev/", 5)) {
+		switch(syscall_family) {
+			case SYSCALL_FAMILY_ALL_ENOENT:
+				*errno_to_be_changed = -ENOENT;
+				return;
+			case SYSCALL_FAMILY_MKNOD:
+				*errno_to_be_changed = -EACCES;
+				return;
+			case SYSCALL_FAMILY_MKDIRAT:
+				*errno_to_be_changed = -EACCES;
+				return;
+			case SYSCALL_FAMILY_RMDIR:
+				*errno_to_be_changed = -ENOENT;
+				return;
+			case SYSCALL_FAMILY_UNLINKAT:
+				*errno_to_be_changed = -ENOENT;
+				return;
+			case SYSCALL_FAMILY_SYMLINKAT_NEWNAME:
+				*errno_to_be_changed = -EACCES;
+				return;
+			case SYSCALL_FAMILY_LINKAT_OLDNAME:
+				*errno_to_be_changed = -ENOENT;
+				return;
+			case SYSCALL_FAMILY_LINKAT_NEWNAME:
+				*errno_to_be_changed = -EXDEV;
+				return;
+			case SYSCALL_FAMILY_RENAMEAT2_OLDNAME:
+				*errno_to_be_changed = -EXDEV;
+				return;
+			case SYSCALL_FAMILY_RENAMEAT2_NEWNAME:
+				*errno_to_be_changed = -EXDEV;
+				return;
+			default:
+				*errno_to_be_changed = -ENOENT;
+				return;
+		}
+	} else if (!strncmp(pathname, "/data/", 6)) {
+				switch(syscall_family) {
+			case SYSCALL_FAMILY_ALL_ENOENT:
+				*errno_to_be_changed = -ENOENT;
+				return;
+			case SYSCALL_FAMILY_MKNOD:
+				*errno_to_be_changed = -EACCES;
+				return;
+			case SYSCALL_FAMILY_MKDIRAT:
+				*errno_to_be_changed = -EACCES;
+				return;
+			case SYSCALL_FAMILY_RMDIR:
+				*errno_to_be_changed = -ENOENT;
+				return;
+			case SYSCALL_FAMILY_UNLINKAT:
+				*errno_to_be_changed = -ENOENT;
+				return;
+			case SYSCALL_FAMILY_SYMLINKAT_NEWNAME:
+				*errno_to_be_changed = -EACCES;
+				return;
+			case SYSCALL_FAMILY_LINKAT_OLDNAME:
+				*errno_to_be_changed = -ENOENT;
+				return;
+			case SYSCALL_FAMILY_LINKAT_NEWNAME:
+				*errno_to_be_changed = -ENOENT;
+				return;
+			case SYSCALL_FAMILY_RENAMEAT2_OLDNAME:
+				*errno_to_be_changed = -ENOENT;
+				return;
+			case SYSCALL_FAMILY_RENAMEAT2_NEWNAME:
+				*errno_to_be_changed = -EXDEV;
+				return;
+			default:
+				*errno_to_be_changed = -ENOENT;
+				return;
+		}
+	}
+}
+
+static void susfs_my_uname_init(void) {
+	memset(&my_uname, 0, sizeof(struct st_susfs_uname));
+	strncpy(my_uname.sysname, "default", __NEW_UTS_LEN);
+	strncpy(my_uname.nodename, "default", __NEW_UTS_LEN);
+	strncpy(my_uname.release, "default", __NEW_UTS_LEN);
+	strncpy(my_uname.version, "default", __NEW_UTS_LEN);
+	strncpy(my_uname.machine, "default", __NEW_UTS_LEN);
+}
+
+void __init susfs_init(void) {
+    spin_lock_init(&susfs_spin_lock);
+	susfs_my_uname_init();
+}
+
+/* No module exit is needed becuase it should never be a loadable kernel module */
+//void __init susfs_exit(void)
diff --git a/include/linux/mount.h b/include/linux/mount.h
index 9fc799307..dac805446 100644
--- a/include/linux/mount.h
+++ b/include/linux/mount.h
@@ -122,6 +122,10 @@ extern dev_t name_to_dev_t(const char *name);
 
 extern unsigned int sysctl_mount_max;
 
+#if defined(CONFIG_KSU) && defined(CONFIG_KSU_SUSFS)
+extern int path_umount(struct path *path, int flags);
+#endif
+
 extern bool path_is_mountpoint(const struct path *path);
 
 extern void kern_unmount_array(struct vfsmount *mnt[], unsigned int num);
diff --git a/include/linux/susfs.h b/include/linux/susfs.h
new file mode 100644
index 000000000..b878e1bce
--- /dev/null
+++ b/include/linux/susfs.h
@@ -0,0 +1,173 @@
+#ifndef KSU_SUSFS_H
+#define KSU_SUSFS_H
+
+#include <linux/types.h>
+#include <linux/utsname.h>
+#include <linux/mount.h>
+
+/* shared with userspace ksu_susfs tool */
+#define CMD_SUSFS_ADD_SUS_PATH 0x55555
+#define CMD_SUSFS_ADD_SUS_MOUNT 0x55556
+#define CMD_SUSFS_ADD_SUS_KSTAT 0x55558
+#define CMD_SUSFS_UPDATE_SUS_KSTAT 0x55559
+#define CMD_SUSFS_ADD_TRY_UMOUNT 0x5555a
+#define CMD_SUSFS_SET_UNAME 0x5555b
+#define CMD_SUSFS_ADD_SUS_KSTAT_STATICALLY 0x5555c
+#define CMD_SUSFS_ENABLE_LOG 0x5555d
+#define CMD_SUSFS_ADD_SUS_MAPS_STATICALLY 0x5555e
+#define CMD_SUSFS_ADD_SUS_PROC_FD_LINK 0x5555f
+#define CMD_SUSFS_ADD_SUS_MAPS 0x55560
+#define CMD_SUSFS_UPDATE_SUS_MAPS 0x55561
+
+#define SUSFS_MAX_LEN_PATHNAME 128
+
+/* non shared to userspace ksu_susfs tool */
+#define SYSCALL_FAMILY_ALL_ENOENT 0
+#define SYSCALL_FAMILY_OPENAT 1
+#define SYSCALL_FAMILY_MKNOD 2
+#define SYSCALL_FAMILY_MKDIRAT 3
+#define SYSCALL_FAMILY_RMDIR 4
+#define SYSCALL_FAMILY_UNLINKAT 5
+#define SYSCALL_FAMILY_SYMLINKAT_NEWNAME 6
+#define SYSCALL_FAMILY_LINKAT_OLDNAME 7
+#define SYSCALL_FAMILY_LINKAT_NEWNAME 8
+#define SYSCALL_FAMILY_RENAMEAT2_OLDNAME 9
+#define SYSCALL_FAMILY_RENAMEAT2_NEWNAME 10
+#define SYSCALL_FAMILY_TRUNCATE 11
+#define SYSCALL_FAMILY_FACCESSAT 12
+#define SYSCALL_FAMILY_CHDIR 13
+
+#define getname_safe(name) (name == NULL ? ERR_PTR(-EINVAL) : getname(name))
+#define putname_safe(name) (IS_ERR(name) ? NULL : putname(name))
+
+#define uid_matches_suspicious_path() (current_uid().val >= 2000)
+//#define uid_matches_suspicious_mount() (current_uid().val >= 0)
+#define uid_matches_suspicious_kstat() (current_uid().val >= 2000)
+//#define uid_matches_suspicious_maps() (current_uid().val >= 0)
+#define uid_matches_suspicious_proc_fd_link() (current_uid().val >= 2000)
+
+struct st_susfs_sus_path {
+    char                   target_pathname[SUSFS_MAX_LEN_PATHNAME];
+    unsigned long          target_ino;
+};
+
+struct st_susfs_sus_mount {
+    unsigned long          target_dev;
+    char                   target_pathname[SUSFS_MAX_LEN_PATHNAME];
+};
+
+struct st_susfs_sus_kstat {
+    unsigned long          target_ino; // the ino after bind mounted or overlayed
+    char                   target_pathname[SUSFS_MAX_LEN_PATHNAME];
+    char                   spoofed_pathname[SUSFS_MAX_LEN_PATHNAME];
+    unsigned long          spoofed_ino;
+    unsigned long          spoofed_dev;
+    unsigned int           spoofed_nlink;
+    long                   spoofed_atime_tv_sec;
+    long                   spoofed_mtime_tv_sec;
+    long                   spoofed_ctime_tv_sec;
+    long                   spoofed_atime_tv_nsec;
+    long                   spoofed_mtime_tv_nsec;
+    long                   spoofed_ctime_tv_nsec;
+};
+
+struct st_susfs_sus_maps {
+    bool                   is_statically;
+    int                    compare_mode;
+    bool                   is_isolated_entry;
+    bool                   is_file;
+    unsigned long          prev_target_ino;
+    unsigned long          next_target_ino;
+    char                   target_pathname[SUSFS_MAX_LEN_PATHNAME];
+    unsigned long          target_ino;
+    unsigned long          target_dev;
+    unsigned long long     target_pgoff;
+    unsigned long          target_prot;
+    unsigned long          target_addr_size;
+    char                   spoofed_pathname[SUSFS_MAX_LEN_PATHNAME];
+    unsigned long          spoofed_ino;
+    unsigned long          spoofed_dev;
+    unsigned long long     spoofed_pgoff;
+    unsigned long          spoofed_prot;
+    bool                   need_to_spoof_pathname;
+    bool                   need_to_spoof_ino;
+    bool                   need_to_spoof_dev;
+    bool                   need_to_spoof_pgoff;
+    bool                   need_to_spoof_prot;
+};
+
+struct st_susfs_try_umount {
+    char                   target_pathname[SUSFS_MAX_LEN_PATHNAME];
+    int                    mnt_mode;
+};
+
+struct st_susfs_sus_proc_fd_link {
+    char                   target_link_name[SUSFS_MAX_LEN_PATHNAME];
+    char                   spoofed_link_name[SUSFS_MAX_LEN_PATHNAME];
+};
+
+struct st_susfs_sus_path_list {
+    struct list_head                        list;
+    struct st_susfs_sus_path                info;
+};
+
+struct st_susfs_sus_mount_list {
+    struct list_head                        list;
+    struct st_susfs_sus_mount               info;
+};
+
+struct st_susfs_sus_kstat_list {
+    struct list_head                        list;
+    struct st_susfs_sus_kstat        info;
+};
+
+struct st_susfs_sus_maps_list {
+    struct list_head                        list;
+    struct st_susfs_sus_maps         info;
+};
+
+struct st_susfs_try_umount_list {
+    struct list_head                        list;
+    struct st_susfs_try_umount              info;
+};
+
+struct st_susfs_sus_proc_fd_link_list {
+    struct list_head                        list;
+    struct st_susfs_sus_proc_fd_link info;
+};
+
+struct st_susfs_uname {
+    char        sysname[__NEW_UTS_LEN+1];
+    char        nodename[__NEW_UTS_LEN+1];
+    char        release[__NEW_UTS_LEN+1];
+    char        version[__NEW_UTS_LEN+1];
+    char        machine[__NEW_UTS_LEN+1];
+};
+
+int susfs_add_sus_path(struct st_susfs_sus_path* __user user_info);
+int susfs_add_sus_mount(struct st_susfs_sus_mount* __user user_info);
+int susfs_add_sus_kstat(struct st_susfs_sus_kstat* __user user_info);
+int susfs_update_sus_kstat(struct st_susfs_sus_kstat* __user user_info);
+int susfs_add_sus_maps(struct st_susfs_sus_maps* __user user_info);
+int susfs_update_sus_maps(struct st_susfs_sus_maps* __user user_info);
+int susfs_add_sus_proc_fd_link(struct st_susfs_sus_proc_fd_link* __user user_info);
+int susfs_add_try_umount(struct st_susfs_try_umount* __user user_info);
+int susfs_set_uname(struct st_susfs_uname* __user user_info);
+
+int susfs_sus_path_by_path(struct path* file, int* errno_to_be_changed, int syscall_family);
+int susfs_sus_path_by_filename(struct filename* name, int* errno_to_be_changed, int syscall_family);
+int susfs_sus_mount(struct vfsmount* mnt, struct path* root);
+int susfs_sus_ino_for_filldir64(unsigned long ino);
+void susfs_sus_kstat(unsigned long ino, struct stat* out_stat);
+int susfs_sus_maps(unsigned long target_ino, unsigned long target_address_size, unsigned long* orig_ino, dev_t* orig_dev, vm_flags_t* flags, unsigned long long* pgoff, struct vm_area_struct* vma, char* tmpname);
+void susfs_sus_proc_fd_link(char *pathname, int len);
+void susfs_try_umount(uid_t target_uid);
+void susfs_spoof_uname(struct new_utsname* tmp);
+
+void susfs_set_log(bool enabled);
+
+void susfs_change_error_no_by_pathname(char* pathname, int* errno_to_be_changed, int syscall_family);
+
+void __init susfs_init(void);
+
+#endif
diff --git a/kernel/sys.c b/kernel/sys.c
index 4b2ebf822..2e5b00cda 100644
--- a/kernel/sys.c
+++ b/kernel/sys.c
@@ -73,6 +73,10 @@
 #include <asm/io.h>
 #include <asm/unistd.h>
 
+#if defined(CONFIG_KSU) && defined(CONFIG_KSU_SUSFS)
+#include <linux/susfs.h>
+#endif
+
 #include "uid16.h"
 
 #include <trace/hooks/sys.h>
@@ -1304,6 +1308,11 @@ SYSCALL_DEFINE1(newuname, struct new_utsname __user *, name)
 	down_read(&uts_sem);
 	memcpy(&tmp, utsname(), sizeof(tmp));
 	up_read(&uts_sem);
+
+#if defined(CONFIG_KSU) && defined(CONFIG_KSU_SUSFS)
+	susfs_spoof_uname(&tmp);
+#endif
+
 	if (copy_to_user(name, &tmp, sizeof(tmp)))
 		return -EFAULT;
 
-- 
2.43.0

